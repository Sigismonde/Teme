#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <semaphore.h>

pthread_barrier_t barrier;
sem_t semaphore;

void* routine(void *arg) {
    int index = *(int*)arg;
    
	pthread_barrier_wait(&barrier);
    sem_wait(&semaphore);
    printf("\nSunt threadul %d", index);
    sleep(1);
    printf("\nThreadul %d completat\n", index);
    sleep(1);
    //sem_post(&semaphore);
    free(arg);
    return NULL;
}

int main(int argc, char *argv[]) {
    int n;

    printf("Enter a value: ");
    scanf("%d", &n);

    if (n % 10 != 0) {
		 printf("Enter a corect value");
        exit(0);
    }

    pthread_t th[n];
    int i;
    
    pthread_barrier_init(&barrier, NULL, 10);
    sem_init(&semaphore, 0, 10);

    for (i = 0; i < n; i++) {
        int* a = malloc(sizeof(int));
        *a = i;
        if (pthread_create(&th[i], NULL, &routine, a) != 0) {
            perror("Failed to create thread");
        }
    }

    for (i = 0; i < n; i++) {
        if (pthread_join(th[i], NULL) != 0) {
            perror("Failed to join thread");
        }
    }
    
    sem_destroy(&semaphore);
    pthread_barrier_destroy(&barrier);
    return 0;
}